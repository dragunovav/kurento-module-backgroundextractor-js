/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var checkType      = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;

var Transaction = kurentoClient.TransactionsManager.Transaction;

var Filter = kurentoClient.register.abstracts.Filter;

/**
 * Create a :rom:cls:`BackgroundExtractor`
 *
 * @classdesc
 *  Filter that converts the user background to alpha
 *
 * @extends module:core/abstracts.Filter
 *
 * @constructor module:backgroundextractor.BackgroundExtractorFilter
 */
function BackgroundExtractorFilter(){
  BackgroundExtractorFilter.super_.call(this);
};
inherits(BackgroundExtractorFilter, Filter);


/**
 * Allow to activate/deactivate the proccessing
 *
 * @alias module:backgroundextractor.BackgroundExtractorFilter.activateProcessing
 *
 * @param {external:Boolean} process
 *  TRUE activates the processing and FALSE deactivates the processing
 *
 * @param {module:backgroundextractor.BackgroundExtractorFilter~activateProcessingCallback} [callback]
 *
 * @return {external:Promise}
 */
BackgroundExtractorFilter.prototype.activateProcessing = function(process, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  checkType('boolean', 'process', process, {required: true});

  var params = {
    process: process,
  };

  return this._invoke(transaction, 'activateProcessing', params, callback);
};
/**
 * @callback module:backgroundextractor.BackgroundExtractorFilter~activateProcessingCallback
 * @param {external:Error} error
 */

/**
 * @alias module:backgroundextractor.BackgroundExtractorFilter.constructorParams
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the {@link module:core.MediaPipeline MediaPipeline} to which the filter belongs
 */
BackgroundExtractorFilter.constructorParams = {
  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  },
};

/**
 * @alias module:backgroundextractor.BackgroundExtractorFilter.events
 *
 * @extend module:core/abstracts.Filter.events
 */
BackgroundExtractorFilter.events = Filter.events;

module.exports = BackgroundExtractorFilter;

BackgroundExtractorFilter.check = function(key, value)
{
  if(!(value instanceof BackgroundExtractorFilter))
    throw ChecktypeError(key, BackgroundExtractorFilter, value);
};
